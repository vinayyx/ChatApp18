import React, { useEffect, useState, useRef } from "react";
import socket from "../../socket"; // socket instance import

function PrivateChat({ toUser, onClose }) {
  const [messages, setMessages] = useState([]);
  const [newMsg, setNewMsg] = useState("");
  const currentUser = localStorage.getItem("username"); // current logged-in user
  const messagesEndRef = useRef(null); // scroll reference

  // Scroll to bottom whenever messages change
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Fetch previous messages on load
  useEffect(() => {
    const fetchMessages = async () => {
      try {
        const res = await fetch(
          `http://localhost:5000/api/messages/private/${currentUser}/${toUser}`
        );
        const data = await res.json();
        setMessages(data);
      } catch (err) {
        console.error("Error fetching messages:", err);
      }
    };

    if (currentUser && toUser) {
      fetchMessages();
    }
  }, [toUser, currentUser]);

  // Listen for private messages from backend
  useEffect(() => {
    const handlePrivateMessage = (msg) => {
      if (
        (msg.fromUser === toUser && msg.toUser === currentUser) || // incoming
        (msg.toUser === toUser && msg.fromUser === currentUser) // outgoing
      ) {
        setMessages((prev) => [...prev, msg]);
      }
    };

    socket.on("privateMessage", handlePrivateMessage);

    return () => {
      socket.off("privateMessage", handlePrivateMessage);
    };
  }, [toUser, currentUser]);

  const sendPrivateMessage = () => {
    if (newMsg.trim()) {
      const msgData = {
        fromUser: currentUser,
        toUser,
        message: newMsg,
        createdAt: new Date().toISOString(),
      };

      // Emit to backend only (UI update will come from socket event)
      socket.emit("privateMessage", msgData);

      setNewMsg("");
    }
  };

  return (
    <div className="fixed bottom-4 right-4 w-72 h-96 flex flex-col shadow-lg rounded-lg bg-gray-900 text-white border border-gray-700">
      {/* Header */}
      <div className="flex justify-between items-center px-3 py-2 bg-gray-800 rounded-t-lg">
        <h3 className="text-sm font-semibold">Chat with {toUser}</h3>
        <button onClick={onClose} className="text-gray-400 hover:text-white">
          âœ•
        </button>
      </div>

      {/* Messages container */}
      <div className="flex-1 overflow-y-auto p-2 space-y-2 text-sm">
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`flex ${
              msg.fromUser === currentUser ? "justify-end" : "justify-start"
            }`}
          >
            <div
              className={`px-2 py-1 rounded-lg max-w-[70%] break-words text-xs ${
                msg.fromUser === currentUser
                  ? "bg-blue-600 text-white"
                  : "bg-gray-700 text-white"
              }`}
            >
              <p>{msg.message}</p>
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      {/* Input box */}
      <div className="flex border-t border-gray-700">
        <input
          type="text"
          value={newMsg}
          onChange={(e) => setNewMsg(e.target.value)}
          placeholder="Type..."
          className="flex-1 px-2 py-2 text-xs bg-gray-800 text-white focus:outline-none"
        />
        <button
          onClick={sendPrivateMessage}
          className="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-xs rounded-r"
        >
          Send
        </button>
      </div>
    </div>
  );
}

export default PrivateChat;
